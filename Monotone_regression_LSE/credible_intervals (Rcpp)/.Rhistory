lines(xx, apply(function.sample,1, FUN=function(x){quantile(x, 1-alpha.level)}))
lines(xx, apply(function.sample,1, FUN=function(x){quantile(x, alpha.level)}))
lines(xx, rowMeans(function.sample), lty="dashed")
legend(0.02, max(y), legend=c(paste(100*credibility.level, "% projection-posterior credible limits"),"Projection-posterior mean"), lty=1:2, cex=0.7)
}
if(plot.function != TRUE){
sample.fx0 <- NULL
# draw samples from projection-posterior
for(i in 1: nPostSamp){
theta <- rnorm(J, postMean, postSd)
theta1<- isotone2(theta, nj, x0)
sample.fx0 <- c(sample.fx0, theta1[[2]])
}
}
lower.limit <- quantile(sample.fx0, alpha.level)
upper.limit <- quantile(sample.fx0, 1 - alpha.level)
interval.obs <- cbind(lower.limit, upper.limit)
lower.limit <- quantile(sample.fx0, correct.level)
upper.limit <- quantile(sample.fx0, 1 - correct.level)
interval.correct <- cbind(lower.limit, upper.limit)
return(list(interval.obs, interval.correct))
}
set.seed(1010)
n <- 100
sigma <- 0.1
x0 <- 0.5
f <- f1
x <- runif(n)
y <- f(x) + rnorm(n, 0, sigma)
cred0 <- projection.credible.interval(x, y, x0 = x0, credibility.level=0.95,
plot.function=TRUE, nPostSamp=1000)
#The $100(1-\alpha)\%$ projection-posterior credible interval is
cred0[[1]] # unadjusted credible interval
#The corrected projection-posterior credible interval with asymptotic coverage  $100(1-\alpha)\%$ is
cred0[[2]]    # adjusted credible interval
#The true value of $f(x_0)$ is
f(x0)
library(Rcpp)
sourceCpp("credible_intervals.cpp")
n=1000
J=floor(n^(1/3)*log(n))
zeta <- rep(0,J)
lambda_sq <- rep(100,J)
output <- credible(n,J,zeta,lambda_sq)
B <- output$posterior_mean
C <- output$CI_LSE
D <- output$percentages
#B<-read.table("posterior_mean.txt")
#C<-read.table("CI_LSE.txt")
#D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
f <- function(x) {x^2+x/5}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="blue")
#lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
lines(c(0,1),c(0.05,0.05),col="red")
#lines(c(0,1),c(0.03676,0.03676),col="red")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/credible_intervals/credible_intervals.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/credible_intervals/credible_intervals.cpp")
library(Rcpp)
sourceCpp("credible_intervals.cpp")
n=1000
J=floor(n^(1/3)*log(n))
zeta <- rep(0,J)
lambda_sq <- rep(100,J)
output <- credible(n,J,zeta,lambda_sq)
B <- output$posterior_mean
C <- output$CI_LSE
D <- output$percentages
#B<-read.table("posterior_mean.txt")
#C<-read.table("CI_LSE.txt")
#D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
f <- function(x) {x^2+x/5}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="blue")
#lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.0,0.5), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
lines(c(0,1),c(0.05,0.05),col="red")
#lines(c(0,1),c(0.03676,0.03676),col="red")
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type ="s",col="blue")
#lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="blue")
#lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
install.packages("Rcpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
library(Rcpp)
sourceCpp("smooth_bootstrap.cpp")
n <- 500
bandwidth <- n^(-1/5)
output <- smooth_bootstrap(n,bandwidth)
B <- output$LSE
C <- output$CI_LSE
D <- output$percentages
E <- output$data
B<-read.table("SLSE.txt")
C<-read.table("CI_LSE.txt")
D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
u1<-E[,1]
v1<-E[,2]
f <- function(x) {x^2+x/5}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type='s')
#points(u1,v1,pch = 1)
lines(x2,y1,lwd=2,lty=1,col="blue")
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-1-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.5,1), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
lines(c(0,1),c(0.95,0.95),col="red")
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x1,z1,lwd=2,type='s')
#points(u1,v1,pch = 1)
lines(x2,y1,lwd=2,lty=1,col="blue")
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/classic+smooth_bootstrap/classic+smooth.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/classic+smooth_bootstrap/classic+smooth.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/classic+smooth_bootstrap/classic+smooth.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
library(Rcpp)
sourceCpp("smooth_bootstrap.cpp")
n <- 500
bandwidth <- n^(-1/5)
output <- smooth_bootstrap(n,bandwidth)
B <- output$LSE
C <- output$CI_LSE
D <- output$percentages
E <- output$data
B<-read.table("SLSE.txt")
C<-read.table("CI_LSE.txt")
D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
u1<-E[,1]
v1<-E[,2]
//f <- function(x) {x^2+x/5}
f <- function(x) {exp(4*(x-0.5))/(1+exp(4* (x-0.5)))}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(y2),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
#lines(x 1,z1,lwd=2,type='s')
#points(u1,v1,pch = 1)
lines(x2,y1,lwd=2,lty=1,col="blue")
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-1-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.5,1), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
lines(c(0,1),c(0.95,0.95),col="red")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/SLSE_bootstrap local_polynomial/SLSE_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/nonpar_regression_R/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/smooth_bootstrap/smooth_bootstrap.cpp")
install.packages("coarseDataTools")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation2.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation2.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation3.cpp")
Rcpp::sourceCpp("~/Xcode_projects/inteq_incub/intequation3.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
install.packages("lbfgs")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/NPMLE_ICM.cpp")
library(Rcpp)
sourceCpp("Weibull.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/simulations/nonparMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime/bootstrap/bootstrap_density1.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy/bootstrap/bandwidth_dens_estimate.cpp")
install.packages("gplots")
library(gplots)
install.packages("ggplot.multistats")
install.packages("ggplot.multistats")
install.packages("mlece")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
//
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/Nadaraya_Watson.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/Nadaraya_Watson.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/Nadaraya_Watson.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/Nadaraya_Watson.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/classic+smooth_bootstrap/CI_NW.cpp")
install.packages("curstatCI")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/CI_SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/CI_SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/CI_SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/CI_SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/SLSE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
########################################################
####   MONOTONE REGRESSION        ######
########################################################
library(Rcpp)
sourceCpp("bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice2.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice2.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression copy/bandwidth_choice.cpp")
install.packages("isotone")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("bootstrap_SMLE.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy 2/bandwidth_df_choice.cpp")
Rcpp::sourceCpp("~/Xcode_projects/incubationtime copy 2/bandwidth_df_choice.cpp")
install.packages("survival")
library(survival)
install.packages("cxhull")
library(cxhull)
points <- rbind(
c(0.5,0.5,0.5),
c(0,0,0),
c(0,0,1),
c(0,1,0),
c(0,1,1),
c(1,0,0),
c(1,0,1),
c(1,1,0),
c(1,1,1)
)
cxhull(points)
cxhull(points)
install.packages("spatstat.geom")
W <- Window(demopat)
x <- runif(30)
y <- runif(30)
w <- convexhull.xy(x,y)
W <- Window(demopat)
plot(convexhull(W), col="lightblue", border=NA)
plot(W, add=TRUE, lwd=2)
x <- runif(100)
y <- runif(100)
w <- convexhull.xy(x,y)
plot(owin(), main="convexhull.xy(x,y)", lty=2)
plot(w, add=TRUE)
points(x,y)
X <- runifrect(30)
plot(X, main="convexhull.xy(X)")
plot(convexhull.xy(X), add=TRUE)
x <- runif(100)
y <- runif(100)
w <- convexhull.xy(x,y)
plot(owin(), main="convexhull.xy(x,y)", lty=1)
plot(w, add=TRUE)
points(x,y)
install.packages("spatstat")
vignette('getstart')
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/smooth_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/smoothed_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/smoothed_bootstrap/smooth_bootstrap.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/regression_percentile_bootstrap/regression_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/correlation_percentile_bootstrap/correlation_percentile.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/credible_intervals (Rcpp)/credible_intervals.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/credible_intervals (Rcpp)/credible_intervals.cpp")
Rcpp::sourceCpp("~/Xcode_projects/monotone-regression_old/credible_intervals (Rcpp)/credible_intervals.cpp")
library(Rcpp)
sourceCpp("credible_intervals.cpp")
setwd("~/Xcode_projects/monotone-regression_old/credible_intervals (Rcpp)")
library(Rcpp)
sourceCpp("credible_intervals.cpp")
f <- function(x) {x^2+x/5}
#f <- function(x) {exp(4*(x-0.5))/(1+exp(4* (x-0.5)))}
x0 <-seq(0,1,by=0.01)
y0<-f(x0)
n=1000
J=floor(n^(1/3)*log(n))
#J=floor(n^(1/2))
zeta <- rep(0,J)
#zeta <- f(seq(0,1,length=J))
lambda_sq <- rep(100,J)
output <- credible(n,J,zeta,lambda_sq)
#B <- output$posterior_mean
#C <- output$CI_LSE
#D <- output$percentages
B<-read.table("posterior_mean.txt")
C<-read.table("CI_LSE.txt")
D<-read.table("percentages.txt")
x1<-B[,1]
z1<-B[,2]
x2<-C[,1]
y1<-C[,2]
y2<-C[,3]
y3<-C[,4]
plot(c(-100,-100),xlim=c(0,1), ylim=c(min(z1),max(y3)), main= "",ylab="",xlab="",bty="n",las=1)
lines(x1,z1,lwd=2,type ="s",col="blue")
lines(x2,y1,lwd=2,col="blue",type='s')
lines(x0, y0,lwd=2,lty=2,col="red")
lines(x2,y2,lwd=1,lty=1,type='s')
lines(x2,y3,lwd=1,lty=1,type='s')
segments(x2,y2,x2,y3)
u<-D[,1]
v<-1-D[,2]
plot(c(-10000,-10000),xlim=c(0.0,1.0), ylim=c(0.75,1), main= "", ylab="",xlab="",bty="n",las=1)
lines(u,v,lty=1)
#lines(c(0,1),c(0.95,0.95),col="red")
lines(c(0,1),c(0.96324,0.96324),lwd=2,col="red")
